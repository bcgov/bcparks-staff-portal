kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-{{ .Values.backend.componentName }}
  labels:
    component: {{ .Values.backend.componentName }}
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      component: {{ .Values.backend.componentName }}
      release: {{ .Release.Name }}
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        component: {{ .Values.backend.componentName }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Values.backend.componentName }}
          resources:
{{ toYaml .Values.backend.resources | indent 12 }}
          image: {{ .Values.images.backend.name }}:{{ .Values.images.backend.tag }}
          imagePullPolicy: {{ .Values.backend.imagePullPolicy }}
          ports:
            - name: {{ .Values.backend.service.portName }}
              containerPort: {{ .Values.backend.service.port }}
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.backend.env.nodeEnv }}
            - name: DEV_TEST_MODE
              value: {{ .Values.backend.env.devTestMode | quote }}
            - name: POSTGRES_SERVER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.postgresSecret }}
                  key: host
            - name: POSTGRES_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.postgresSecret }}
                  key: port
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.postgresSecret }}
                  key: dbname
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.postgresSecret }}
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.postgresSecret }}
                  key: password
            - name: JWKS_URI
              value: {{ .Values.cluster.ssoAuthUrl }}/realms/{{ .Values.cluster.ssoRealm }}/protocol/openid-connect/certs
            - name: JWT_ISSUER
              value: {{ .Values.cluster.ssoAuthUrl }}/realms/{{ .Values.cluster.ssoRealm }}
            - name: STRAPI_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-strapi-token
                  key: STRAPI_TOKEN
            - name: STRAPI_URL
              value: {{ .Values.cluster.cmsUrl }}
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-adminjs-secret
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.backend.service.portName }}
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 20
          startupProbe:
            httpGet:
              path: /
              port: {{ .Values.backend.service.portName }}
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 20
